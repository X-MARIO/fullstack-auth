version: '3.8'

services:
  postgres-db:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      INSIGHT_WEB_PORT: ${INSIGHT_WEB_PORT}
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend

  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight:latest
    restart: always
    environment:
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDISINSIGHT_HOST: ${REDISINSIGHT_HOST}
      REDISINSIGHT_ACCEPT_LICENSE: ${REDISINSIGHT_ACCEPT_LICENSE}
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/db
    networks:
      - backend
    depends_on:
      - redis

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  redisinsight_data:

networks:
  backend: